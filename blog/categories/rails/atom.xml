<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Скука и рутина это зло]]></title>
  <link href="http://vladimir-vg.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://vladimir-vg.github.io/"/>
  <updated>2014-10-20T21:26:18+03:00</updated>
  <id>http://vladimir-vg.github.io/</id>
  <author>
    <name><![CDATA[Gordeev Vladimir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Повторное использование кода в gamedev. Возможно?]]></title>
    <link href="http://vladimir-vg.github.io/blog/2012/10/04/gamedev-framework/"/>
    <updated>2012-10-04T14:56:00+03:00</updated>
    <id>http://vladimir-vg.github.io/blog/2012/10/04/gamedev-framework</id>
    <content type="html"><![CDATA[<p>Ещё совсем недавно веб был совсем другой: скрипты хостились на shared-хостингах
где набор доступных библиотек жёстко фиксировался хостером, и везде правил <a href="http://en.wikipedia.org/wiki/PHP">PHP</a>.</p>

<p>Огромный зоопарк фреймворков, несовместимых библиотек, некоторые из которых
требовали специальных опций в <code>php.ini</code> для своей работы, некоторые работали
только под определёнными версиями PHP. В общем прелесть.</p>

<p>С появлением «ООП» в PHP стало лучше, жить стало веселее, люди стали создавать фреймворки
соревнуясь с джавистами в обобщённости и абстрактности. В итоге всё это было
похоже на огромную несовместимую кучу говна.</p>

<p>Потом что-то изменилось. Возможно потому что VPS вошли в моду и стали
повсеместно доступны, может ещё что-то. Так или иначе <a href="http://rubyonrails.org/">Ruby on Rails</a> стал
набирать популярность.</p>

<p>Думаю никто не станет спорить, что сегодня RoR является наиболее комфортной
платформой для веб-разработки:</p>

<ul>
  <li>Строгое разделение кода по функциональности. <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a> во все поля.</li>
  <li>Тесты, тесты, тесты. Множество фреймворков для тестирования,
сложившаяся культура в сообществе.</li>
  <li>Гибкое управление пакетами (rubygems &amp; bundler), использование специальных
версий библиотек не доставляет боли.</li>
  <li>Огромное количество библиотек, в первую очередь для вебаю</li>
</ul>

<p>И уже не важно тормозит Ruby или нет (по последним бенчмаркам он сравнялся с Python).
Этот недостаток перевешивают преимущества, так необходимые для реальной разработки.</p>

<p>Конечно Rails не панацея, он может не подходить для некоторых проектов, однако
большую часть веб-проектов быстрее и легче писать на Rails.</p>

<p>Таким образом, на мой взгляд, неупорядоченный и несовместимый веб стал упорядоченным.
Взросла определённая культура среди разработчиков.</p>

<h1 id="gamedev">А теперь взглянем на gamedev</h1>

<p>Там сложилась очень похожая ситуация что и недавно в вебе.</p>

<!--more-->

<p>Игры принято писать на С++. Это мультипарадигменный язык, на нём можно писать
в различных стилях: можно использовать дикую шаблонную магию в стиле <a href="http://www.boost.org/">boost</a>,
можно с любовью городить монструозную иерархию классов, как привыкли джависты,
можно вообще писать в сишном стиле, только структуры и функции, только хардкор.</p>

<p>Открывая любой проект написанный на C++ вы не можете знать наверняка
с чем вам придётся столкнуться.</p>

<p><a href="http://en.wikipedia.org/wiki/C%2B%2B11">Новый стандарт C++</a> подливает масла в огонь,
и если вы ещё не познакомились с новвоведениями,
то чей-нибудь код может надолго вогнать вас в ступор.</p>

<p>Один мой приятель рассказывал как работая над одним проектом неожиданно
обнаружил что он требует патченую версию библиотеки, отличную
от той что лежит в официальном репозитории. Обнаружилось это только
когда приложение спустя некоторое время стало валиться.</p>

<p>В Rails мире такая проблема решается просто: форк проекта с наложением патча
и инструкция в <code>Gemfile</code> с требованием использовать код из нашего репозитория.
Всё.</p>

<p>В мире C++ такая информация передаётся из уст в уста, или в файликах README,
как в старые добрые времена. Плохо когда нет автоматического управления зависимостями.
Очень плохо.</p>

<p>Культура тоже сложилась не ахти какая. Тестировать код (автоматическими тестами)
– скорее исключение чем правило. Зато повсюду принято писать
микрооптимизации, некоторые умудряются вставлять куски кода на асме,
всё потому что “так быстрее работает”, разумеется не подкрепляя утверждения
никакими бенчмарками.</p>

<p>Очень похоже на ситуацию что я описывал выше. Разброд и шатание,
блядство-разврат-наркотики.</p>

<h1 id="section">И как сделать лучше?</h1>

<p>Ясно что C++ здесь не подходит.
Очевидно что это должен быть язык, реализация которого достаточно быстро
оперирует с числами, но при этом без багажа C++. Язык достаточно гибкий
для создания сложной, расширяемой архитектуры. 
В идеале это должен быть язык работающий и под iOS и под Android.
Правда не уверен возможно ли это.</p>

<p>Мне нравится пророчить Go на это место.
Перечитав строки выше понял что JavaScript вроде бы тоже подходит.</p>

<p>Идём дальше. Нужно создать фреймворк на этом этом языке, где было бы строгое
разбиение кода по функционалу, что-то подобное MVC.</p>

<p><a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention-over-configuration</a>
это вторая вещь которой следует научиться у Rails,
дерево исходных кодов должно быть фиксированным для всех проектов,
чтобы любой разработчик знал где искать какие часть проекта, даже увидев его впервые.</p>

<p>Если подумать, то похоже игровой код может лечь в MVC:</p>

<ul>
  <li>
    <p>World/Models – здесь хранится весь мир, игровые объекты, их состояние и характеристики,
игровые координаты. Для каждого world определён метод <code>process</code>, который обрабатывает
действия в мире с течением времени. Частота обработки фиксируется при подлючении этого
world. Также World должен отвечать за обработку физики.</p>

    <p>Большая часть логики кода должна быть записана здесь.</p>
  </li>
  <li>
    <p>View – код отвечающий за отрисовку конкретных объектов на экране. Список объектов
необходимо запрашивать у world. Шейдерная магия также определяется здесь.
У каждого из view должен быть метод <code>draw</code> который вызывается по таймеру.</p>
  </li>
  <li>
    <p>Controller – набор обработчиков событий, как внутриигровых, так и устройств ввода,
а также обработку пакетов из сети.</p>
  </li>
</ul>

<p>К примеру если потребуется сделать игровой сервер, то он мог
бы иметь несколько World-ов обрабатываемых одновременно, и не иметь никаких
view (и вовсе не иметь видеокарты). Для сервера пришлось бы дописать несколько
контроллеров работающих с сетью, но в целом, код тот же что и на клиенте.</p>

<p>Итог: весь пост это моё имхо, я только пробую себя в gamdev,
если где спорол херню – кидайте какашки в комментах.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Store в Rails 3.2]]></title>
    <link href="http://vladimir-vg.github.io/blog/2012/05/24/activerecord-3.2-store/"/>
    <updated>2012-05-24T09:21:00+03:00</updated>
    <id>http://vladimir-vg.github.io/blog/2012/05/24/activerecord-3.2-store</id>
    <content type="html"><![CDATA[<p>Недавно довелось пользоваться <code>store</code>-атрибутами которые появились в последних
рельсах. На самом деле <code>store</code>-атрибуты довольно простая вещь: это поле в
таблице типа <code>text</code>, которое хранит сложные данные сериализованные в текстовом формате.
Подобное может быть очень полезно для множества различных настроек, для которых
не хочется создавать по отдельному столбцу в таблице.</p>

<p>Т.к. это просто кусок сериализованных данных, то никакого индексирования и поиска
по полям само-собой нет.
(В отличие от документно-ориентированной <a href="http://www.mongodb.org/">MongoDB</a>)</p>

<p>Вроде бы ничего особенного, главная фича в том, что с полями хранимыми с помощью
<code>store</code> можно работать также как с обычными полями: использовать в формах,
проводить валидацию. Примеры использования можно увидеть
<a href="http://web-l.nl/posts/12-rails-3-2-active-record-s-store">здесь</a>,
<a href="http://yearofmoo.com/2012/01/rails-3-2-and-active-record-store/">здесь</a> и
<a href="http://blog.rawonrails.com/2012/02/using-activerecordstore-with-rails-32.html">здесь</a>.</p>

<p>Мне понадобилось реализовать хранение расписания в таблице, просто набор
промежутков времени для каждого дня. Не хотелось создавать отдельную таблицу
для промежутков, гораздо проще было бы просто сериализовать через <code>store</code>.</p>

<p>Однако вылезла следующая проблема: непонятно как работать с этими данными на
клиентской стороне, через формы. Значения <code>store</code>-полей выводились как есть,
используя ruby-синтаксис, тогда как мне нужен был JSON.</p>

<p>К примеру</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Activity</span> &lt; <span class="constant">ActiveRecord</span>::<span class="constant">Base</span>
  store <span class="symbol">:schedule</span>, <span class="key">accessors</span>: [<span class="symbol">:monday</span>]
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>и если присвоить полю <code>monday</code> значение <code>[{:start =&gt; "01:00am", :end =&gt; "02:00am"}]</code>
и вывести в форме через <code>&lt;%= f.input :monday %&gt;</code> то значение будет обычная
строка <code>[{:start =&gt; "01:00am", :end =&gt; "02:00am"}]</code>, тогда как мне нужны данные
в формате JSON для более удобной работы через JavaScript.</p>

<p>Сделал небольшой хак, позволяющий присваивать и получать JSON.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Activity</span> &lt; <span class="constant">ActiveRecord</span>::<span class="constant">Base</span>
  store <span class="symbol">:schedule</span>

  <span class="keyword">def</span> <span class="function">schedule</span>
    map = <span class="predefined-constant">self</span>[<span class="symbol">:schedule</span>].map { |day, value| [day, JSON(value)] }
    <span class="constant">Hash</span>[map]
  <span class="keyword">end</span>

  [<span class="symbol">:monday</span>].each <span class="keyword">do</span> |day|
    define_method(<span class="symbol"><span class="symbol">:</span><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>day<span class="inline-delimiter">}</span></span><span class="content">=</span><span class="delimiter">&quot;</span></span>) <span class="keyword">do</span> |value|
      value = value.to_json <span class="keyword">unless</span> value.kind_of? <span class="constant">String</span>
      <span class="predefined-constant">self</span>[<span class="symbol">:schedule</span>][day] = value
    <span class="keyword">end</span>

    define_method(day) <span class="keyword">do</span>
      <span class="predefined-constant">self</span>[<span class="symbol">:schedule</span>][day]
    <span class="keyword">end</span>
  <span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Теперь можно получать и присваивать JSON через обычные accessors, а к объектам
обращаться с помощью <code>.schedule[:monday]</code>.</p>

<p>Не самое элегантное решение, но проблему решает.</p>
]]></content>
  </entry>
  
</feed>
