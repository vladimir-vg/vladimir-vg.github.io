<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: activerecord | code]]></title>
  <link href="http://vladimir-vg.github.io/blog/categories/activerecord/atom.xml" rel="self"/>
  <link href="http://vladimir-vg.github.io/"/>
  <updated>2014-05-26T12:53:46+03:00</updated>
  <id>http://vladimir-vg.github.io/</id>
  <author>
    <name><![CDATA[Gordeev Vladimir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Store в Rails 3.2]]></title>
    <link href="http://vladimir-vg.github.io/blog/2012/05/24/activerecord-3.2-store/"/>
    <updated>2012-05-24T09:21:00+03:00</updated>
    <id>http://vladimir-vg.github.io/blog/2012/05/24/activerecord-3.2-store</id>
    <content type="html"><![CDATA[<p>Недавно довелось пользоваться <code>store</code>-атрибутами которые появились в последних
рельсах. На самом деле <code>store</code>-атрибуты довольно простая вещь: это поле в
таблице типа <code>text</code>, которое хранит сложные данные сериализованные в текстовом формате.
Подобное может быть очень полезно для множества различных настроек, для которых
не хочется создавать по отдельному столбцу в таблице.</p>

<p>Т.к. это просто кусок сериализованных данных, то никакого индексирования и поиска
по полям само-собой нет.
(В отличие от документно-ориентированной <a href="http://www.mongodb.org/">MongoDB</a>)</p>

<p>Вроде бы ничего особенного, главная фича в том, что с полями хранимыми с помощью
<code>store</code> можно работать также как с обычными полями: использовать в формах,
проводить валидацию. Примеры использования можно увидеть
<a href="http://web-l.nl/posts/12-rails-3-2-active-record-s-store">здесь</a>,
<a href="http://yearofmoo.com/2012/01/rails-3-2-and-active-record-store/">здесь</a> и
<a href="http://blog.rawonrails.com/2012/02/using-activerecordstore-with-rails-32.html">здесь</a>.</p>

<p>Мне понадобилось реализовать хранение расписания в таблице, просто набор
промежутков времени для каждого дня. Не хотелось создавать отдельную таблицу
для промежутков, гораздо проще было бы просто сериализовать через <code>store</code>.</p>

<p>Однако вылезла следующая проблема: непонятно как работать с этими данными на
клиентской стороне, через формы. Значения <code>store</code>-полей выводились как есть,
используя ruby-синтаксис, тогда как мне нужен был JSON.</p>

<p>К примеру</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Activity</span> &lt; <span class="constant">ActiveRecord</span>::<span class="constant">Base</span>
  store <span class="symbol">:schedule</span>, <span class="key">accessors</span>: [<span class="symbol">:monday</span>]
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>и если присвоить полю <code>monday</code> значение <code>[{:start =&gt; "01:00am", :end =&gt; "02:00am"}]</code>
и вывести в форме через <code>&lt;%= f.input :monday %&gt;</code> то значение будет обычная
строка <code>[{:start =&gt; "01:00am", :end =&gt; "02:00am"}]</code>, тогда как мне нужны данные
в формате JSON для более удобной работы через JavaScript.</p>

<p>Сделал небольшой хак, позволяющий присваивать и получать JSON.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Activity</span> &lt; <span class="constant">ActiveRecord</span>::<span class="constant">Base</span>
  store <span class="symbol">:schedule</span>

  <span class="keyword">def</span> <span class="function">schedule</span>
    map = <span class="predefined-constant">self</span>[<span class="symbol">:schedule</span>].map { |day, value| [day, JSON(value)] }
    <span class="constant">Hash</span>[map]
  <span class="keyword">end</span>

  [<span class="symbol">:monday</span>].each <span class="keyword">do</span> |day|
    define_method(<span class="symbol"><span class="symbol">:</span><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>day<span class="inline-delimiter">}</span></span><span class="content">=</span><span class="delimiter">&quot;</span></span>) <span class="keyword">do</span> |value|
      value = value.to_json <span class="keyword">unless</span> value.kind_of? <span class="constant">String</span>
      <span class="predefined-constant">self</span>[<span class="symbol">:schedule</span>][day] = value
    <span class="keyword">end</span>

    define_method(day) <span class="keyword">do</span>
      <span class="predefined-constant">self</span>[<span class="symbol">:schedule</span>][day]
    <span class="keyword">end</span>
  <span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Теперь можно получать и присваивать JSON через обычные accessors, а к объектам
обращаться с помощью <code>.schedule[:monday]</code>.</p>

<p>Не самое элегантное решение, но проблему решает.</p>
]]></content>
  </entry>
  
</feed>
